#Example API Client scripts (using curl)

## Overview

Curl is a command line utility for making web requests to a server.  It can be used for accessing the "read" API as well as for posting data to the "write" API methods.  All of the API endpoints require authentication by the client, thus all of these examples will include a few lines of code which obtains the authentication token.  The examples are all "bash" scripts which use the curl command to make the request to the API.  All of the bash scripts include a file called `api_env.example.sh` which defines variables for the location of the API, and can copied to `api_env.sh` then be edited as needed. It makes a request to the api host to obtain the authentication token based on user credentials (email/password). User names and passwords will be assigned by Mann Library IT and scripts will need to be edited to use these credentials.

```
# usda-stg
apiHost=http://usda-stg.library.cornell.edu
apiBase=http://usda-stg.library.cornell.edu/api/v1

# usda-prod
# apiHost=http://usda-prod.library.cornell.edu
# apiBase=http://usda-prod.library.cornell.edu/api/v1

# Get an authentication token
json=$(curl -s -X POST "$apiHost/user_token" -d '{"auth": {"email": "APIUSER", "password": "APIPASS"}}' -H "Content-Type: application/json")
token=$(echo $json | cut -d":" -f2 | sed -e 's/"//g' -e 's/}$//g')
```
 
## Read Examples

All examples will return data in JSON format 

### agency_findAll.sh
Return data for all agencies

Sample Invocation:  `sh agency_findAll.sh`

Code:
```
#!/bin/sh
. ./api_env.sh

# Call API with authentication token
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/agency/findAll"
echo
``` 
### agency_findByAcronym.sh
Return data for an agency given an agency acronym

Sample Invocation:  `sh agency_findByAcronym.sh NASS`

Code:
```
#!/bin/sh
. ./api_env.sh
acronym=$1
# Call API with authentication token
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/agency/findByAcronym/$acronym"
echo
``` 

### agency_findById.sh
Return data for an agency given an agency id. Agency IDs can be determined by using the agency_findAll.sh script and looking at the "id" field.

Sample Invocation:  `sh agency_findById.sh q524jn774`

Code:
```
#!/bin/sh
. ./api_env.sh
id=$1
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/agency/findById/$id"
echo
```  
### publication_findAll.sh

Return data for all publications.  NOTE: This can be time consuming once the site is fully populated with data.

Sample Invocation:  `sh publication_findAll.sh`

Code:
```
#!/bin/sh
. ./api_env.sh
# Call API with authentication token
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/publication/findAll"
echo
``` 

### publication_findByAgency.sh

Return all publications for a specific agency, given an agency acronym

Sample Invocation:  `sh publication_findByAgency.sh NASS`

Code:
```
#!/bin/sh
. ./api_env.sh
AGENCY=$1
# Call API with authentication token
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/publication/findByAgency/$AGENCY"
echo
``` 

### publication_findById.sh

Return data for a publication given an publication id. Publication IDs can be determined by using the publication_findAll.sh or publication_findByAgency.sh script and looking at the "id" field.

Sample Invocation:  `sh publication_findById.sh t435gc985`

Code:
```
#!/bin/sh
. ./api_env.sh
id=$1
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/publication/findById/$id"
echo
```

### publication_findByIdentifier.sh

Return data for a publication given the internal agency identifier (e.g. PoulSlau). Identifiers can be determined by using the publication_findAll.sh or publication_findByAgency.sh script and looking at the "identifier" field.

Sample Invocation:  `sh publication_findByIdentifier.sh PoulSlau`

Code:
```
#!/bin/sh
. ./api_env.sh
IDENTIFIER=$1
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/publication/findByIdentifier/$IDENTIFIER"
echo
```

### publication_search.sh

Return a list of publications given a search term. 

Sample Invocation:  `sh publication_search.sh Poultry`

Code:
```#!/bin/sh
. ./api_env.sh
# Use token variable when making API request
TERM=$1
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/publication/search?q=$TERM"
echo
```

### release_findByIdentifier.sh

Return a list of release data given an agency internal identifier (e.g. PoulSlau).  Note that this method has two optional arguments for limiting the results to a date range.  Although they use the same API method, two examples are shown here.

Sample Invocation (without date range): `sh release_findByIdentifier.sh PoulSlau`
Code:
```
#!/bin/sh
. ./api_env.sh
IDENTIFIER=$1
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/release/findByIdentifier/$IDENTIFIER"
echo
```
Sample Invocation (with date range):  `sh release_findByIdentifierAndDate.sh wasde 01-01-2017 04-30-2017`

Code:
```
#!/bin/sh
. ./api_env.sh
IDENTIFIER=$1
START=$2
END=$3
curl -H "Authorization: Bearer $token" -H "Accept: application/json" "$apiBase/release/findByIdentifier/$IDENTIFIER?start_date=$START&end_date=$END"
echo
```

## Write (POST) examples

Write (POST) methods are a bit more complicated as they requires some data to be constructed by the client then included in the request as part of the body.  The content is in JSON format so that it can be easily be parsed by the API. In the case of releases, it requires a "multipart/form-data" request which includes the files which will be uploaded as well as the json data which describes the files.

### publication_create.sh

This will create a Publication in the ESMIS system.  In this example, a json file with the metadata needs to be created and the filename passed to the script as an argument.

Sample Invocation: `sh publication_create.sh TrouProd.json`

Code:
```
#!/bin/sh
. ./api_env.sh
pubJson=$1
cat $pubJson | curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $token" -H "Accept: application/json" -d @- "$apiBase/publication/create"
echo
```

Note that the contents of the json file is piped into the curl command. The "-d @-" option indicates that it is receiving data from standard input.

### release_create.sh

This is, by far, the most complex example.  Rather than use a JSON file containing the required metadata the request must set header values individually. The names of the files to be uploaded are passed as arguments to the script.  The release-datetime header value should match the release date in the file names.  

Sample Invocation: 

`sh release_create.sh TrouProd-05-20-2017.txt TrouProd-05-20-2017.pdf TrouProd-05-20-2017.zip`

Code:
```

#!/bin/sh
. ./api_env.sh
# Pick up arguments
identifier=$1
file0=$2
file1=$3
file2=$4
# invoke curl with a multipart/form-data request
curl  \
-F "uploaded_files[]=@$file0" \
-F "uploaded_files[]=@$file1" \
-F "uploaded_files[]=@$file2" \
-F "release_datetime=02/27/2017" \
-H "Content-Type: multipart/form-data" \
-H "Authorization: Bearer $token" \
-H "Accept: application/json" \
-H 'Cache-Control: no-cache' \
"$apiBase/release/create?identifier=$identifier"
echo
```
In this example, a call is made to obtain an authentication token using the api_env.sh file, then that token is used in the "Authorization: Bearer:" request header.  Next, three arguments are read (the order is dependent upon the order of the arguments passed to the script).  The next three arguments contain the file names of the files which will be uploaded.  

Now, let's look at each line in curl command:
   
* **-F "uploaded_files[]=@$file0"** - this line, and the next two lines, specify form elements.  The API will recognize file0, file1, etc. as filenames to be uploaded to the system.  The at (@) sign tells the curl command to read each of the files as standard input, which it include as files in the multipart request.
* **-F "release_datetime=02/27/2017"** - this contains the release date for all the files
* **-H "Content-Type: multipart/form-data"**  - This line indicates that request is a multipart/form-data request, which will include a specific "boundary" string between each of the parts.
* **-H "Authorization: Bearer $token"** - This is the authorization request header which contains the authentication token.
* **-H "Accept: application/json"** -  The Accept header tells the API that it should return results as JSON
* **"$apiBase/release/create/$identifier"** - the last line of the curl command contains the name of the API endpoint which includes the identifier for the publication for which a release is being uploaded.

